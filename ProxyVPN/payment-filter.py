import re
import time
import os

# Path to the log file generated by proxy.py
LOG_FILE_PATH = "bifrost-ui\public\proxy_logs\proxy.log"
PAYMENT_LINKS_FILE = "../payment_links.txt"

# Regular expression for identifying payment-related links 
PAYMENT_KEYWORDS = [
    "paytm",        # Specific for Paytm
    "pay",          # General for any 'pay' related links
    "checkout",     # Often used in e-commerce
    "order",        # Used for order-related links
    "transaction",  # Payment transaction links
    "payment",      # General for any payment-related links
    "gateway",      # Used in payment gateways like Razorpay, PayPal, etc.
    "buy",          # Common in e-commerce and payment systems
    "invoice",      # Related to billing and payment invoices
    "purchase",     # Used for purchase-related pages
    "subscription", # Subscription-based services
    "cart",         # Shopping cart links
    "paynow",       # Often used as a call to action on payment pages
    "billing",      # Billing section in payment pages
    "paymentwall",  # Specific payment platform (PaymentWall)
    "stripe",       # Popular payment gateway
    "paypal",       # Popular payment gateway
    "razorpay",     # Popular payment gateway in India
    "secure-payment", # For secure payment pages       
    "merchant",     # Merchant-related links
    "payment-processing", # Links with payment processing terms
    "payment-method", # Payment method selection pages
    "funds",         # Financial transaction pages
    "wallet",        # Digital wallets like Paytm, Google Pay, etc.
    "financial",     # Used in finance-related pages
    "online-payment", # General online payment keyword
    "money",         # Can be used in finance and payments
    "charge",        # Common in payment processing links
    "paysecure",     # Security-related payment pages
    "paymentsystem", # General payment system pages
    "digital-payment" # Digital payment pages
]


# Function to check if the URL contains any payment-related keyword
def is_payment_link(url: str) -> bool:
    return any(keyword.lower() in url.lower() for keyword in PAYMENT_KEYWORDS)

def filter_payment_links():
    # Ensure the payment_links.txt file exists
    if not os.path.exists(PAYMENT_LINKS_FILE):
        with open(PAYMENT_LINKS_FILE, 'w') as f:
            f.write("Payment links captured:\n")

    try:
        with open(LOG_FILE_PATH, 'r') as log_file:
            # Read lines one by one from the log file (tail -f behavior)
            while True:
                line = log_file.readline()
                if line:
                    # Extract the URL from the line
                    urls = re.findall(r'(https?://\S+)', line)
                    for url in urls:
                        if is_payment_link(url):
                            # If the URL is a payment link, write it to the payment links file
                            with open(PAYMENT_LINKS_FILE, 'a') as payment_file:
                                payment_file.write(url + '\n')
                            print(f"Captured Payment Link: {url}")
                else:
                    time.sleep(1)  # Wait before checking the file again for new entries
    except KeyboardInterrupt:
        print("Stopping payment link filter.")
    except Exception as e:
        print(f"Error occurred: {e}")

if __name__ == "__main__":
    filter_payment_links()